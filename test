
import React, { useState } from 'react';

// Main App component
const App = () => {
  // Sample data for carousel items
  const items = [
    { id: 1, text: 'Item 1', color: 'bg-red-300' },
    { id: 2, text: 'Item 2', color: 'bg-blue-300' },
    { id: 3, text: 'Item 3', color: 'bg-green-300' },
    { id: 4, text: 'Item 4', color: 'bg-yellow-300' },
    { id: 5, text: 'Item 5', color: 'bg-purple-300' },
    { id: 6, text: 'Item 6', color: 'bg-pink-300' },
    { id: 7, text: 'Item 7', color: 'bg-indigo-300' },
    { id: 8, text: 'Item 8', color: 'bg-teal-300' },
    { id: 9, text: 'Item 9', color: 'bg-orange-300' },
    { id: 10, text: 'Item 10', color: 'bg-lime-300' },
    { id: 11, text: 'Item 11', color: 'bg-fuchsia-300' },
    { id: 12, text: 'Item 12', color: 'bg-emerald-300' },
  ];

  // Number of items to display per page/slide
  const itemsPerPage = 4;

  // State to keep track of the current starting index of visible items
  const [currentIndex, setCurrentIndex] = useState(0);

  // Calculate the total number of pages
  const totalPages = Math.ceil(items.length / itemsPerPage);

  // Handle navigation to the next page
  const handleNext = () => {
    // If we are on the last page, loop back to the first page
    setCurrentIndex((prevIndex) =>
      prevIndex + itemsPerPage >= items.length ? 0 : prevIndex + itemsPerPage
    );
  };

  // Handle navigation to the previous page
  const handlePrev = () => {
    // If we are on the first page, loop back to the last page
    setCurrentIndex((prevIndex) =>
      prevIndex - itemsPerPage < 0 ? (totalPages - 1) * itemsPerPage : prevIndex - itemsPerPage
    );
  };

  // Calculate the transform value for the carousel items container
  // Each item takes 25% width (100% / 4 itemsPerPage), so 100% is one page.
  // We translate by the percentage of the current index relative to items per page.
  const carouselTransform = `translateX(-${(currentIndex / itemsPerPage) * 100}%)`;

  return (
    <div className="min-h-screen bg-gray-100 flex items-center justify-center p-4 font-sans antialiased">
      <div className="w-full max-w-5xl bg-white p-6 rounded-xl shadow-lg">
        <h2 className="text-3xl font-bold text-gray-800 mb-6 text-center">Featured Items</h2>

        <div className="relative flex items-center justify-between">
          {/* Previous Button */}
          <button
            onClick={handlePrev}
            className="absolute left-0 z-10 p-3 bg-gray-800 text-white rounded-full shadow-md hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-75 -translate-x-1/2"
            aria-label="Previous items"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-6 w-6"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
              strokeWidth="2"
            >
              <path strokeLinecap="round" strokeLinejoin="round" d="M15 19l-7-7 7-7" />
            </svg>
          </button>

          {/* Carousel Items Container */}
          {/* The overflow-hidden class is crucial to hide items outside the view */}
          <div className="flex-grow overflow-hidden px-10">
            {/* The style attribute with transform and transition provides the sliding animation */}
            <div
              className="flex transition-transform duration-500 ease-in-out" // Increased duration for a smoother slide
              style={{ transform: carouselTransform }}
            >
              {/* Mapping through ALL items, but only a subset will be visible at any time */}
              {items.map((item) => (
                <div
                  key={item.id}
                  className="w-1/4 flex-shrink-0 p-2" // w-1/4 to show 4 items per row, flex-shrink-0 to prevent shrinking
                >
                  <div
                    className={`${item.color} h-48 rounded-lg flex items-center justify-center text-white text-xl font-semibold shadow-md`}
                  >
                    {item.text}
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Next Button */}
          <button
            onClick={handleNext}
            className="absolute right-0 z-10 p-3 bg-gray-800 text-white rounded-full shadow-md hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-75 translate-x-1/2"
            aria-label="Next items"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-6 w-6"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
              strokeWidth="2"
            >
              <path strokeLinecap="round" strokeLinejoin="round" d="M9 5l7 7-7 7" />
            </svg>
          </button>
        </div>

        {/* Pagination Dots */}
        <div className="flex justify-center mt-6 space-x-2">
          {Array.from({ length: totalPages }).map((_, index) => (
            <button
              key={index}
              // Clicking a dot sets the currentIndex to the start of that page
              onClick={() => setCurrentIndex(index * itemsPerPage)}
              className={`h-3 w-3 rounded-full ${
                currentIndex / itemsPerPage === index ? 'bg-gray-800' : 'bg-gray-300'
              } focus:outline-none focus:ring-2 focus:ring-gray-500`}
              aria-label={`Go to page ${index + 1}`}
            ></button>
          ))}
        </div>
      </div>
    </div>
  );
};

export default App;
