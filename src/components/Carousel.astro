---
import Member from "./Member.astro";
import type { TeamMember } from "../types.ts";

export interface Props {
  items: TeamMember[];
}

const { items } = Astro.props as Props;
---

<div class="relative flex items-center justify-between">
  <div class="flex-grow overflow-x-auto">
    <div
      id="carouselItemsContainer"
      class="grid grid-cols-2 grid-rows-2 md:grid-cols-4 md:grid-rows-1 gap-4 transition-transform duration-500 ease-in-out"
      style="min-height: 420px;"
    >
      {
        items.map((item, idx) => (
          <div
            class={`h-full flex flex-col${idx > 3 ? " hidden" : ""}`}
            data-index={idx}
          >
            <Member member={item} />
          </div>
        ))
      }
    </div>
  </div>
</div>

<div class="flex items-center justify-around mt-6 space-x-4">
  <button
    id="prevButton"
    class="p-2 bg-white text-accent-one rounded-full shadow-md border border-gray-200 hover:bg-gray-100"
    aria-label="Previous items"
    style="visibility: hidden;"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="h-5 w-5"
      fill="none"
      viewBox="0 0 24 24"
      stroke="#000"
      stroke-width="2"
    >
      <path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7"
      ></path>
    </svg>
  </button>
  <div id="paginationDots" class="flex justify-center space-x-2">
    {/* Dots will be generated dynamically by JavaScript */}
  </div>
  <button
    id="nextButton"
    class="p-2 bg-white text-accent-one rounded-full shadow-md border border-gray-200 hover:bg-gray-100"
    aria-label="Next items"
    style="visibility: visible;"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="h-5 w-5"
      fill="none"
      viewBox="0 0 24 24"
      stroke="#000"
      stroke-width="2"
    >
      <path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7"
      ></path>
    </svg>
  </button>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // Get references to DOM elements
    const carouselItemsContainer = document.getElementById(
      "carouselItemsContainer",
    )!;
    const prevButton = document.getElementById(
      "prevButton",
    ) as HTMLButtonElement;
    const nextButton = document.getElementById(
      "nextButton",
    ) as HTMLButtonElement;
    const paginationDotsContainer = document.getElementById(
      "paginationDots",
    ) as HTMLDivElement;

    const allItems = { length: 16 };
    const itemsPerPage = 4;
    const totalPages = Math.ceil(allItems.length / itemsPerPage);
    let currentPage = 0;

    function updateVisibleCards() {
      const cards = carouselItemsContainer.querySelectorAll("[data-index]");
      cards.forEach((card, idx) => {
        const pageStart = currentPage * itemsPerPage;
        const pageEnd = pageStart + itemsPerPage;
        if (idx >= pageStart && idx < pageEnd) {
          card.classList.remove("hidden");
        } else {
          card.classList.add("hidden");
        }
      });
    }

    const updatePaginationDots = () => {
      paginationDotsContainer.innerHTML = "";
      for (let i = 0; i < totalPages; i++) {
        const dotButton = document.createElement("button");
        dotButton.classList.add(
          "h-3",
          "rounded-full",
          "focus:outline-none",
          "focus:ring-2",
          "focus:ring-[#FF6A1A]",
          "transition-all",
        );
        dotButton.setAttribute("aria-label", `Go to page ${i + 1}`);
        if (currentPage === i) {
          dotButton.classList.add("bg-accent-one", "w-6");
        } else {
          dotButton.classList.add("bg-background", "w-3");
        }
        dotButton.addEventListener("click", () => {
          currentPage = i;
          updateCarousel();
        });
        paginationDotsContainer.appendChild(dotButton);
      }
    };

    function updateArrows() {
      if (prevButton)
        prevButton.style.visibility = currentPage === 0 ? "hidden" : "visible";
      if (nextButton)
        nextButton.style.display =
          currentPage === totalPages - 1 ? "hidden" : "visible";
    }

    const updateCarousel = () => {
      updateVisibleCards();
      updatePaginationDots();
      updateArrows();
    };

    prevButton.addEventListener("click", () => {
      if (currentPage > 0) {
        currentPage--;
        updateCarousel();
      }
    });
    nextButton.addEventListener("click", () => {
      if (currentPage < totalPages - 1) {
        currentPage++;
        updateCarousel();
      }
    });

    updateCarousel();
  });
</script>
